#include<iostream>
#include<vector>
#include<algorithm>
#include<queue>
using namespace std;
int N,M,T;
int arr[101][101];
int visited[101][101];
int visited2[101][101];
int sx,sy;
int dx[4]={0,0,1,-1};
int dy[4]={1,-1,0,0};
int ans=10001;



struct state{
    int x;
    int y;
    int length;
    int state;
};

int main(){
    cin>>N>>M>>T;
    
    for(int i=0;i<N;i++){
        for(int j=0;j<M;j++){
            cin>>arr[i][j];
            if(arr[i][j]==2){
                sx=i;
                sy=j;
            }
        }
    }
    queue<state>Q;
    visited[0][0]=1;
    visited2[0][0]=1;
    Q.push({0,0,0,0});
    
    while(!Q.empty()){
        state tmp=Q.front();
        Q.pop();
        if(tmp.length>T)continue;
       // cout<<"확인 "<<tmp.x<<" "<<tmp.y<<" "<<tmp.length<<endl;
        if(tmp.x==N-1 && tmp.y==M-1){
            ans=min(tmp.length,ans);
            break;
        }
        if(tmp.x==sx && tmp.y==sy){
            tmp.state=1;
             
        }
        
        if(tmp.state==0){
            for(int k=0;k<4;k++){
                int nx=tmp.x+dx[k];
                int ny=tmp.y+dy[k];
                if(nx<0||ny<0||N<=nx||M<=ny)continue;
                if(!visited[nx][ny]){
                    if(arr[nx][ny]==0 || arr[nx][ny]==2){
                        visited[nx][ny]=1;
                        Q.push({nx,ny,tmp.length+1,tmp.state});
                    }
                }
            }
        }
        else if(tmp.state==1){
                
            for(int k=0;k<4;k++){
                int nx=tmp.x+dx[k];
                int ny=tmp.y+dy[k];
                if(nx<0||ny<0||N<=nx||M<=ny)continue;
                if(!visited2[nx][ny]){
                    visited2[nx][ny]=1;
             
                    Q.push({nx,ny,tmp.length+1,tmp.state});
                }
                
            }
        }
    }
    
    if(ans!=10001)
        cout<<ans<<endl;
    else
        cout<<"Fail"<<endl;
    
}
