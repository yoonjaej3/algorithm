import java.util.ArrayList;
import java.util.Scanner;


public class Main {

    static int N;
    static int max_answer = -987654321;
    static int min_answer = 987654321;


    static void dfs(int cur, int sum, ArrayList<Integer>V, int []opp) {
        if (cur == N-1) {

            if (max_answer < sum)
                max_answer = sum;

            if (min_answer > sum)
                min_answer = sum;
        }
        else {

            for (int i = 0; i < 4; i++) {
                int []temp_opp=opp.clone();

                int temp_sum = sum;
                if (opp[i] > 0) {
                    switch (i) {
                        case 0:
                            temp_sum += V.get(cur+1);
                            temp_opp[i]--;
                            break;
                        case 1:
                            temp_sum -=V.get(cur+1);
                            temp_opp[i]--;
                            break;
                        case 2:
                            temp_sum *= V.get(cur+1);
                            temp_opp[i]--;
                            break;
                        case 3:
                            temp_sum /=V.get(cur+1);
                            temp_opp[i]--;
                            break;
                    }

                    dfs(cur + 1, temp_sum, V, temp_opp);
                }

            }
        }
    }

    public static <Descending> void main(String[] args) {
        ArrayList<Integer> answer=new ArrayList<Integer>();

        Scanner scan=new Scanner(System.in);
        N=scan.nextInt();
        ArrayList<Integer>V=new ArrayList<Integer>();
        int [] opp=new int[4];

        for (int i = 0; i < N; i++) {
            int x;
            x=scan.nextInt();
            V.add(x);
        }


        for (int i = 0; i < 4; i++) {
            int x;
            x=scan.nextInt();
            opp[i]=x;
        }

        dfs(0,V.get(0), V, opp);

        System.out.println(max_answer);
        System.out.println(min_answer);

    }


}
