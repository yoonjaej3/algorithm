{\rtf1\ansi\ansicpg949\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
import java.util.ArrayList;\
import java.util.Collections;\
import java.util.HashMap;\
import java.util.Scanner;\
\
\
public class Main \{\
\
    private static int [][]arr =new int[26][26];\
    static Boolean [][]visited= new Boolean[26][26];\
    private static int N;\
    static int [] dx = \{ 0,0,1,-1 \};\
    static int []dy = \{ 1,-1,0,0 \};\
    static HashMap<Integer, Integer>m=new HashMap<Integer, Integer>();\
\
\
    static void dfs(int x, int y, int num) \{\
\
        for (int i = 0; i < 4; i++) \{\
            int nx = x + dx[i];\
            int ny = y + dy[i];\
            if (0 <= nx && 0 <= ny && nx <= N - 1 && ny <= N - 1) \{\
                if (!visited[nx][ny] && arr[nx][ny] == 1) \{\
                    visited[nx][ny] = true;\
                    m.put(num,m.get(num)+1);\
                    dfs(nx, ny, num);\
                \}\
            \}\
        \}\
        return;\
    \}\
\
    public static <Descending> void main(String[] args) \{\
        ArrayList<Integer> answer=new ArrayList<Integer>();\
\
        Scanner scan=new Scanner(System.in);\
        N=scan.nextInt();\
        for (int i = 0; i < N; i++) \{\
            String s;\
            s=scan.next();\
            for (int j = 0; j < N; j++) \{\
                arr[i][j] = s.charAt(j) - '0';\
            \}\
        \}\
\
        for(int i=0;i<N;i++)\{\
            for(int j=0;j<N;j++)\
                visited[i][j]=false;\
        \}\
\
        int num = 1;//
\f1 \'bc\'bd\'bc\'c7
\f0  
\f1 \'b9\'f8\'c8\'a3
\f0 \
\
        //
\f1 \'b8\'f0\'b5\'e7\'c1\'a1
\f0  
\f1 \'c5\'bd\'bb\'f6
\f0 \
        for (int i = 0; i < N; i++) \{\
            for (int j = 0; j < N; j++) \{\
                if (!visited[i][j] && arr[i][j]==1) \{\
                    visited[i][j] = true;\
                    m.put(num,1);\
                    dfs(i, j,num);\
                    num++;\
                \}\
            \}\
        \}\
\
\
        //map
\f1 \'c0\'bb
\f0  
\f1 \'c0\'cc\'bf\'eb\'c7\'cf\'bf\'a9
\f0  
\f1 \'b0\'a2\'b0\'a2\'c0\'c7
\f0  
\f1 \'b4\'dc\'c1\'f6\'b3\'bb
\f0  
\f1 \'c1\'fd\'c0\'c7
\f0  
\f1 \'b0\'b9\'bc\'f6
\f0 \
\
        for(int key:m.keySet())\{\
            answer.add(m.get(key));\
        \}\
        Collections.sort(answer);\
\
        System.out.println(answer.size());\
        for(Integer i:answer)\{\
            System.out.println(i);\
        \}\
    \}\
\
\
\}}